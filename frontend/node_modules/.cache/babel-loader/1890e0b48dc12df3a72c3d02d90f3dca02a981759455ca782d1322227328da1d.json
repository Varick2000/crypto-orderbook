{"ast":null,"code":"var _jsxFileName = \"D:\\\\100\\\\crypto-orderbook\\\\frontend\\\\src\\\\components\\\\OrderBookTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { calculatePercent, calculateDelta } from '../utils/calculations';\n\n/**\n * Таблиця з ордербуками для всіх токенів і бірж\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderBookTable = ({\n  orderbooks,\n  exchanges,\n  tokens,\n  thresholds,\n  onCellClick\n}) => {\n  _s();\n  // Стан для підсвічених клітин\n  const [highlightedCells, setHighlightedCells] = useState({});\n\n  // Функція для визначення чи потрібно підсвітити клітину\n  const shouldHighlight = useCallback((token, exchange, type, value) => {\n    if (value === 'X X X' || !exchanges || exchanges.length < 2) return null;\n    const currentValue = parseFloat(value);\n    if (isNaN(currentValue)) return null;\n\n    // Порівнюємо з іншими біржами\n    let highlightType = null;\n    for (const otherExchange of exchanges) {\n      var _orderbooks$token, _orderbooks$token$oth;\n      if (otherExchange === exchange) continue;\n      const otherValue = (_orderbooks$token = orderbooks[token]) === null || _orderbooks$token === void 0 ? void 0 : (_orderbooks$token$oth = _orderbooks$token[otherExchange]) === null || _orderbooks$token$oth === void 0 ? void 0 : _orderbooks$token$oth[type === 'sell' ? 'best_sell' : 'best_buy'];\n      if (otherValue === 'X X X') continue;\n      const otherValueFloat = parseFloat(otherValue);\n      if (isNaN(otherValueFloat)) continue;\n\n      // Розрахунок відсотка і дельти\n      const percent = calculatePercent(currentValue, otherValueFloat);\n      const delta = calculateDelta(currentValue, otherValueFloat);\n      if (type === 'sell') {\n        // Для sell ордерів підсвічуємо, якщо поточна ціна нижча\n        if (percent <= -thresholds.percentThreshold || delta <= -thresholds.deltaThreshold) {\n          highlightType = 'green';\n          break;\n        }\n      } else {\n        // Для buy ордерів підсвічуємо, якщо поточна ціна вища\n        if (percent >= thresholds.percentThreshold || delta >= thresholds.deltaThreshold) {\n          highlightType = 'green';\n          break;\n        }\n      }\n    }\n    return highlightType;\n  }, [orderbooks, exchanges, thresholds]);\n\n  // Оновлення підсвічених клітин при зміні даних\n  useEffect(() => {\n    const newHighlightedCells = {};\n    tokens.forEach(token => {\n      newHighlightedCells[token] = {};\n      exchanges.forEach(exchange => {\n        if (!orderbooks[token] || !orderbooks[token][exchange]) return;\n        const sellValue = orderbooks[token][exchange].best_sell;\n        const buyValue = orderbooks[token][exchange].best_buy;\n        const sellHighlight = shouldHighlight(token, exchange, 'sell', sellValue);\n        const buyHighlight = shouldHighlight(token, exchange, 'buy', buyValue);\n        newHighlightedCells[token][exchange] = {\n          sell: sellHighlight,\n          buy: buyHighlight\n        };\n      });\n    });\n    setHighlightedCells(newHighlightedCells);\n  }, [orderbooks, tokens, exchanges, shouldHighlight]);\n\n  // Функція для визначення класу CSS для клітини\n  const getCellClass = (token, exchange, type) => {\n    var _highlightedCells$tok, _highlightedCells$tok2;\n    const highlight = (_highlightedCells$tok = highlightedCells[token]) === null || _highlightedCells$tok === void 0 ? void 0 : (_highlightedCells$tok2 = _highlightedCells$tok[exchange]) === null || _highlightedCells$tok2 === void 0 ? void 0 : _highlightedCells$tok2[type];\n    let className = `price-cell ${type}-price`;\n    if (highlight) {\n      className += ` highlight-${highlight}`;\n    }\n    return className;\n  };\n\n  // Обробник кліку на клітину\n  const handleCellClick = (token, exchange, type) => {\n    if (onCellClick) {\n      onCellClick(token, exchange, type);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"orderbook-table-container\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"orderbook-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Token\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), exchanges.map(exchange => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: exchange\n          }, exchange, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tokens.map(token => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              rowSpan: \"2\",\n              className: \"token-cell\",\n              children: token\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"type-cell\",\n              children: \"Sell\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this), exchanges.map(exchange => {\n              var _orderbooks$token2, _orderbooks$token2$ex;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: getCellClass(token, exchange, 'sell'),\n                onClick: () => handleCellClick(token, exchange, 'sell'),\n                children: ((_orderbooks$token2 = orderbooks[token]) === null || _orderbooks$token2 === void 0 ? void 0 : (_orderbooks$token2$ex = _orderbooks$token2[exchange]) === null || _orderbooks$token2$ex === void 0 ? void 0 : _orderbooks$token2$ex.best_sell) || 'X X X'\n              }, `${token}-${exchange}-sell`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"type-cell\",\n              children: \"Buy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), exchanges.map(exchange => {\n              var _orderbooks$token3, _orderbooks$token3$ex;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: getCellClass(token, exchange, 'buy'),\n                onClick: () => handleCellClick(token, exchange, 'buy'),\n                children: ((_orderbooks$token3 = orderbooks[token]) === null || _orderbooks$token3 === void 0 ? void 0 : (_orderbooks$token3$ex = _orderbooks$token3[exchange]) === null || _orderbooks$token3$ex === void 0 ? void 0 : _orderbooks$token3$ex.best_buy) || 'X X X'\n              }, `${token}-${exchange}-buy`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)]\n        }, token, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(OrderBookTable, \"YJ3F0FNwei+zADeWya0qBWOSIAo=\");\n_c = OrderBookTable;\nexport default OrderBookTable;\nvar _c;\n$RefreshReg$(_c, \"OrderBookTable\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","calculatePercent","calculateDelta","jsxDEV","_jsxDEV","OrderBookTable","orderbooks","exchanges","tokens","thresholds","onCellClick","_s","highlightedCells","setHighlightedCells","shouldHighlight","token","exchange","type","value","length","currentValue","parseFloat","isNaN","highlightType","otherExchange","_orderbooks$token","_orderbooks$token$oth","otherValue","otherValueFloat","percent","delta","percentThreshold","deltaThreshold","newHighlightedCells","forEach","sellValue","best_sell","buyValue","best_buy","sellHighlight","buyHighlight","sell","buy","getCellClass","_highlightedCells$tok","_highlightedCells$tok2","highlight","className","handleCellClick","children","fileName","_jsxFileName","lineNumber","columnNumber","map","Fragment","rowSpan","_orderbooks$token2","_orderbooks$token2$ex","onClick","_orderbooks$token3","_orderbooks$token3$ex","_c","$RefreshReg$"],"sources":["D:/100/crypto-orderbook/frontend/src/components/OrderBookTable.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { calculatePercent, calculateDelta } from '../utils/calculations';\n\n/**\n * Таблиця з ордербуками для всіх токенів і бірж\n */\nconst OrderBookTable = ({ \n  orderbooks, \n  exchanges, \n  tokens,\n  thresholds,\n  onCellClick\n}) => {\n  // Стан для підсвічених клітин\n  const [highlightedCells, setHighlightedCells] = useState({});\n\n  // Функція для визначення чи потрібно підсвітити клітину\n  const shouldHighlight = useCallback((token, exchange, type, value) => {\n    if (value === 'X X X' || !exchanges || exchanges.length < 2) return null;\n\n    const currentValue = parseFloat(value);\n    if (isNaN(currentValue)) return null;\n\n    // Порівнюємо з іншими біржами\n    let highlightType = null;\n    \n    for (const otherExchange of exchanges) {\n      if (otherExchange === exchange) continue;\n      \n      const otherValue = orderbooks[token]?.[otherExchange]?.[type === 'sell' ? 'best_sell' : 'best_buy'];\n      if (otherValue === 'X X X') continue;\n      \n      const otherValueFloat = parseFloat(otherValue);\n      if (isNaN(otherValueFloat)) continue;\n      \n      // Розрахунок відсотка і дельти\n      const percent = calculatePercent(currentValue, otherValueFloat);\n      const delta = calculateDelta(currentValue, otherValueFloat);\n      \n      if (type === 'sell') {\n        // Для sell ордерів підсвічуємо, якщо поточна ціна нижча\n        if (\n          (percent <= -thresholds.percentThreshold) || \n          (delta <= -thresholds.deltaThreshold)\n        ) {\n          highlightType = 'green';\n          break;\n        }\n      } else {\n        // Для buy ордерів підсвічуємо, якщо поточна ціна вища\n        if (\n          (percent >= thresholds.percentThreshold) || \n          (delta >= thresholds.deltaThreshold)\n        ) {\n          highlightType = 'green';\n          break;\n        }\n      }\n    }\n\n    return highlightType;\n  }, [orderbooks, exchanges, thresholds]);\n\n  // Оновлення підсвічених клітин при зміні даних\n  useEffect(() => {\n    const newHighlightedCells = {};\n    \n    tokens.forEach(token => {\n      newHighlightedCells[token] = {};\n      \n      exchanges.forEach(exchange => {\n        if (!orderbooks[token] || !orderbooks[token][exchange]) return;\n        \n        const sellValue = orderbooks[token][exchange].best_sell;\n        const buyValue = orderbooks[token][exchange].best_buy;\n        \n        const sellHighlight = shouldHighlight(token, exchange, 'sell', sellValue);\n        const buyHighlight = shouldHighlight(token, exchange, 'buy', buyValue);\n        \n        newHighlightedCells[token][exchange] = {\n          sell: sellHighlight,\n          buy: buyHighlight\n        };\n      });\n    });\n    \n    setHighlightedCells(newHighlightedCells);\n  }, [orderbooks, tokens, exchanges, shouldHighlight]);\n\n  // Функція для визначення класу CSS для клітини\n  const getCellClass = (token, exchange, type) => {\n    const highlight = highlightedCells[token]?.[exchange]?.[type];\n    let className = `price-cell ${type}-price`;\n    \n    if (highlight) {\n      className += ` highlight-${highlight}`;\n    }\n    \n    return className;\n  };\n\n  // Обробник кліку на клітину\n  const handleCellClick = (token, exchange, type) => {\n    if (onCellClick) {\n      onCellClick(token, exchange, type);\n    }\n  };\n\n  return (\n    <div className=\"orderbook-table-container\">\n      <table className=\"orderbook-table\">\n        <thead>\n          <tr>\n            <th>Token</th>\n            <th>Type</th>\n            {exchanges.map(exchange => (\n              <th key={exchange}>{exchange}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {tokens.map(token => (\n            <React.Fragment key={token}>\n              {/* Рядок для цін Sell */}\n              <tr>\n                <td rowSpan=\"2\" className=\"token-cell\">{token}</td>\n                <td className=\"type-cell\">Sell</td>\n                {exchanges.map(exchange => (\n                  <td \n                    key={`${token}-${exchange}-sell`}\n                    className={getCellClass(token, exchange, 'sell')}\n                    onClick={() => handleCellClick(token, exchange, 'sell')}\n                  >\n                    {orderbooks[token]?.[exchange]?.best_sell || 'X X X'}\n                  </td>\n                ))}\n              </tr>\n              {/* Рядок для цін Buy */}\n              <tr>\n                <td className=\"type-cell\">Buy</td>\n                {exchanges.map(exchange => (\n                  <td \n                    key={`${token}-${exchange}-buy`}\n                    className={getCellClass(token, exchange, 'buy')}\n                    onClick={() => handleCellClick(token, exchange, 'buy')}\n                  >\n                    {orderbooks[token]?.[exchange]?.best_buy || 'X X X'}\n                  </td>\n                ))}\n              </tr>\n            </React.Fragment>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default OrderBookTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}