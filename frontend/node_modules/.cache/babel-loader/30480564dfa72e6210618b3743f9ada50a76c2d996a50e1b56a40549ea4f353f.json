{"ast":null,"code":"/**\n * Сервіс для роботи з WebSocket-підключенням до бекенду\n */\nclass WebSocketService {\n  constructor(url) {\n    this.url = url;\n    this.socket = null;\n    this.isConnected = false;\n    this.reconnectTimeout = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 10;\n    this.reconnectDelay = 2000; // 2 секунди\n\n    // Колбеки для різних подій\n    this.callbacks = {\n      onOpen: [],\n      onClose: [],\n      onError: [],\n      onOrderbookUpdate: [],\n      onTokenAdded: [],\n      onTokenRemoved: [],\n      onExchangeAdded: [],\n      onExchangeRemoved: [],\n      onOrderbooksCleared: [],\n      onFullTableUpdate: [],\n      onInitialData: [],\n      onError: []\n    };\n  }\n\n  /**\n   * Підключення до WebSocket\n   */\n  connect() {\n    if (this.socket && (this.socket.readyState === WebSocket.OPEN || this.socket.readyState === WebSocket.CONNECTING)) {\n      console.log('WebSocket already connected or connecting');\n      return;\n    }\n    this.socket = new WebSocket(this.url);\n    this.socket.onopen = () => {\n      console.log('WebSocket connected');\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      this.triggerCallbacks('onOpen');\n    };\n    this.socket.onclose = event => {\n      console.log(`WebSocket closed: ${event.code} - ${event.reason}`);\n      this.isConnected = false;\n      this.triggerCallbacks('onClose', event);\n\n      // Спроба переконектитись\n      this.scheduleReconnect();\n    };\n    this.socket.onerror = error => {\n      console.error('WebSocket error:', error);\n      this.triggerCallbacks('onError', error);\n    };\n    this.socket.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        this.handleMessage(message);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n  }\n\n  /**\n   * Планування спроби переконектитись\n   */\n  scheduleReconnect() {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n    }\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = this.reconnectDelay * Math.pow(1.5, this.reconnectAttempts - 1);\n      console.log(`Reconnecting in ${delay / 1000} seconds (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      this.reconnectTimeout = setTimeout(() => {\n        this.connect();\n      }, delay);\n    } else {\n      console.error('Max reconnect attempts reached, giving up');\n    }\n  }\n\n  /**\n   * Відключення від WebSocket\n   */\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n      this.isConnected = false;\n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n        this.reconnectTimeout = null;\n      }\n    }\n  }\n\n  /**\n   * Відправка повідомлення на сервер\n   */\n  send(message) {\n    if (!this.isConnected) {\n      console.warn('Cannot send message, WebSocket not connected');\n      return false;\n    }\n    try {\n      this.socket.send(JSON.stringify(message));\n      return true;\n    } catch (error) {\n      console.error('Error sending WebSocket message:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Обробка вхідних повідомлень\n   */\n  handleMessage(message) {\n    const type = message.type;\n    switch (type) {\n      case 'orderbook_update':\n        this.triggerCallbacks('onOrderbookUpdate', {\n          exchange: message.exchange,\n          token: message.token,\n          sell: message.sell,\n          buy: message.buy,\n          best_sell: message.best_sell,\n          best_buy: message.best_buy\n        });\n        break;\n      case 'token_added':\n        this.triggerCallbacks('onTokenAdded', message.token);\n        break;\n      case 'token_removed':\n        this.triggerCallbacks('onTokenRemoved', message.token);\n        break;\n      case 'exchange_added':\n        this.triggerCallbacks('onExchangeAdded', message.exchange);\n        break;\n      case 'exchange_removed':\n        this.triggerCallbacks('onExchangeRemoved', message.exchange);\n        break;\n      case 'orderbooks_cleared':\n        this.triggerCallbacks('onOrderbooksCleared');\n        break;\n      case 'full_table_update':\n        this.triggerCallbacks('onFullTableUpdate', message.data);\n        break;\n      case 'initial_data':\n        this.triggerCallbacks('onInitialData', {\n          tokens: message.tokens,\n          exchanges: message.exchanges,\n          orderbooks: message.orderbooks\n        });\n        break;\n      case 'error':\n        console.error('Server error:', message.message);\n        this.triggerCallbacks('onError', message.message);\n        break;\n      default:\n        console.warn('Unknown message type:', type);\n        break;\n    }\n  }\n\n  /**\n   * Виклик зареєстрованих колбеків\n   */\n  triggerCallbacks(event, data) {\n    if (this.callbacks[event]) {\n      this.callbacks[event].forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in ${event} callback:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Реєстрація колбеку\n   */\n  on(event, callback) {\n    if (this.callbacks[event]) {\n      this.callbacks[event].push(callback);\n    } else {\n      console.warn(`Unknown event: ${event}`);\n    }\n    return this; // Для ланцюгового виклику\n  }\n\n  /**\n   * Видалення колбеку\n   */\n  off(event, callback) {\n    if (this.callbacks[event]) {\n      this.callbacks[event] = this.callbacks[event].filter(cb => cb !== callback);\n    }\n    return this;\n  }\n\n  /**\n   * Підписка на оновлення ордербуків\n   */\n  subscribe(tokens = [], exchanges = []) {\n    return this.send({\n      action: 'subscribe',\n      tokens,\n      exchanges\n    });\n  }\n\n  /**\n   * Додавання нового токену\n   */\n  addToken(token) {\n    return this.send({\n      action: 'add_token',\n      token\n    });\n  }\n\n  /**\n   * Видалення токену\n   */\n  removeToken(token) {\n    return this.send({\n      action: 'remove_token',\n      token\n    });\n  }\n\n  /**\n   * Додавання нової біржі\n   */\n  addExchange(exchange, url, type = 'websocket') {\n    return this.send({\n      action: 'add_exchange',\n      exchange,\n      url,\n      type\n    });\n  }\n\n  /**\n   * Видалення біржі\n   */\n  removeExchange(exchange) {\n    return this.send({\n      action: 'remove_exchange',\n      exchange\n    });\n  }\n\n  /**\n   * Оновлення цін\n   */\n  updatePrices(exchange = null) {\n    return this.send({\n      action: 'update_prices',\n      exchange\n    });\n  }\n\n  /**\n   * Очищення всіх ордербуків\n   */\n  clear() {\n    return this.send({\n      action: 'clear'\n    });\n  }\n}\nexport default WebSocketService;","map":{"version":3,"names":["WebSocketService","constructor","url","socket","isConnected","reconnectTimeout","reconnectAttempts","maxReconnectAttempts","reconnectDelay","callbacks","onOpen","onClose","onError","onOrderbookUpdate","onTokenAdded","onTokenRemoved","onExchangeAdded","onExchangeRemoved","onOrderbooksCleared","onFullTableUpdate","onInitialData","connect","readyState","WebSocket","OPEN","CONNECTING","console","log","onopen","triggerCallbacks","onclose","event","code","reason","scheduleReconnect","onerror","error","onmessage","message","JSON","parse","data","handleMessage","clearTimeout","delay","Math","pow","setTimeout","disconnect","close","send","warn","stringify","type","exchange","token","sell","buy","best_sell","best_buy","tokens","exchanges","orderbooks","forEach","callback","on","push","off","filter","cb","subscribe","action","addToken","removeToken","addExchange","removeExchange","updatePrices","clear"],"sources":["D:/100/crypto-orderbook/frontend/src/services/websocket.js"],"sourcesContent":["/**\n * Сервіс для роботи з WebSocket-підключенням до бекенду\n */\nclass WebSocketService {\n    constructor(url) {\n      this.url = url;\n      this.socket = null;\n      this.isConnected = false;\n      this.reconnectTimeout = null;\n      this.reconnectAttempts = 0;\n      this.maxReconnectAttempts = 10;\n      this.reconnectDelay = 2000; // 2 секунди\n      \n      // Колбеки для різних подій\n      this.callbacks = {\n        onOpen: [],\n        onClose: [],\n        onError: [],\n        onOrderbookUpdate: [],\n        onTokenAdded: [],\n        onTokenRemoved: [],\n        onExchangeAdded: [],\n        onExchangeRemoved: [],\n        onOrderbooksCleared: [],\n        onFullTableUpdate: [],\n        onInitialData: [],\n        onError: []\n      };\n    }\n  \n    /**\n     * Підключення до WebSocket\n     */\n    connect() {\n      if (this.socket && (this.socket.readyState === WebSocket.OPEN || this.socket.readyState === WebSocket.CONNECTING)) {\n        console.log('WebSocket already connected or connecting');\n        return;\n      }\n      \n      this.socket = new WebSocket(this.url);\n      \n      this.socket.onopen = () => {\n        console.log('WebSocket connected');\n        this.isConnected = true;\n        this.reconnectAttempts = 0;\n        this.triggerCallbacks('onOpen');\n      };\n      \n      this.socket.onclose = (event) => {\n        console.log(`WebSocket closed: ${event.code} - ${event.reason}`);\n        this.isConnected = false;\n        this.triggerCallbacks('onClose', event);\n        \n        // Спроба переконектитись\n        this.scheduleReconnect();\n      };\n      \n      this.socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.triggerCallbacks('onError', error);\n      };\n      \n      this.socket.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          this.handleMessage(message);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n    }\n  \n    /**\n     * Планування спроби переконектитись\n     */\n    scheduleReconnect() {\n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n      }\n      \n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        this.reconnectAttempts++;\n        const delay = this.reconnectDelay * Math.pow(1.5, this.reconnectAttempts - 1);\n        \n        console.log(`Reconnecting in ${delay / 1000} seconds (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        \n        this.reconnectTimeout = setTimeout(() => {\n          this.connect();\n        }, delay);\n      } else {\n        console.error('Max reconnect attempts reached, giving up');\n      }\n    }\n  \n    /**\n     * Відключення від WebSocket\n     */\n    disconnect() {\n      if (this.socket) {\n        this.socket.close();\n        this.socket = null;\n        this.isConnected = false;\n        \n        if (this.reconnectTimeout) {\n          clearTimeout(this.reconnectTimeout);\n          this.reconnectTimeout = null;\n        }\n      }\n    }\n  \n    /**\n     * Відправка повідомлення на сервер\n     */\n    send(message) {\n      if (!this.isConnected) {\n        console.warn('Cannot send message, WebSocket not connected');\n        return false;\n      }\n      \n      try {\n        this.socket.send(JSON.stringify(message));\n        return true;\n      } catch (error) {\n        console.error('Error sending WebSocket message:', error);\n        return false;\n      }\n    }\n  \n    /**\n     * Обробка вхідних повідомлень\n     */\n    handleMessage(message) {\n      const type = message.type;\n      \n      switch (type) {\n        case 'orderbook_update':\n          this.triggerCallbacks('onOrderbookUpdate', {\n            exchange: message.exchange,\n            token: message.token,\n            sell: message.sell,\n            buy: message.buy,\n            best_sell: message.best_sell,\n            best_buy: message.best_buy\n          });\n          break;\n          \n        case 'token_added':\n          this.triggerCallbacks('onTokenAdded', message.token);\n          break;\n          \n        case 'token_removed':\n          this.triggerCallbacks('onTokenRemoved', message.token);\n          break;\n          \n        case 'exchange_added':\n          this.triggerCallbacks('onExchangeAdded', message.exchange);\n          break;\n          \n        case 'exchange_removed':\n          this.triggerCallbacks('onExchangeRemoved', message.exchange);\n          break;\n          \n        case 'orderbooks_cleared':\n          this.triggerCallbacks('onOrderbooksCleared');\n          break;\n          \n        case 'full_table_update':\n          this.triggerCallbacks('onFullTableUpdate', message.data);\n          break;\n          \n        case 'initial_data':\n          this.triggerCallbacks('onInitialData', {\n            tokens: message.tokens,\n            exchanges: message.exchanges,\n            orderbooks: message.orderbooks\n          });\n          break;\n          \n        case 'error':\n          console.error('Server error:', message.message);\n          this.triggerCallbacks('onError', message.message);\n          break;\n          \n        default:\n          console.warn('Unknown message type:', type);\n          break;\n      }\n    }\n  \n    /**\n     * Виклик зареєстрованих колбеків\n     */\n    triggerCallbacks(event, data) {\n      if (this.callbacks[event]) {\n        this.callbacks[event].forEach(callback => {\n          try {\n            callback(data);\n          } catch (error) {\n            console.error(`Error in ${event} callback:`, error);\n          }\n        });\n      }\n    }\n  \n    /**\n     * Реєстрація колбеку\n     */\n    on(event, callback) {\n      if (this.callbacks[event]) {\n        this.callbacks[event].push(callback);\n      } else {\n        console.warn(`Unknown event: ${event}`);\n      }\n      \n      return this; // Для ланцюгового виклику\n    }\n  \n    /**\n     * Видалення колбеку\n     */\n    off(event, callback) {\n      if (this.callbacks[event]) {\n        this.callbacks[event] = this.callbacks[event].filter(cb => cb !== callback);\n      }\n      \n      return this;\n    }\n  \n    /**\n     * Підписка на оновлення ордербуків\n     */\n    subscribe(tokens = [], exchanges = []) {\n      return this.send({\n        action: 'subscribe',\n        tokens,\n        exchanges\n      });\n    }\n  \n    /**\n     * Додавання нового токену\n     */\n    addToken(token) {\n      return this.send({\n        action: 'add_token',\n        token\n      });\n    }\n  \n    /**\n     * Видалення токену\n     */\n    removeToken(token) {\n      return this.send({\n        action: 'remove_token',\n        token\n      });\n    }\n  \n    /**\n     * Додавання нової біржі\n     */\n    addExchange(exchange, url, type = 'websocket') {\n      return this.send({\n        action: 'add_exchange',\n        exchange,\n        url,\n        type\n      });\n    }\n  \n    /**\n     * Видалення біржі\n     */\n    removeExchange(exchange) {\n      return this.send({\n        action: 'remove_exchange',\n        exchange\n      });\n    }\n  \n    /**\n     * Оновлення цін\n     */\n    updatePrices(exchange = null) {\n      return this.send({\n        action: 'update_prices',\n        exchange\n      });\n    }\n  \n    /**\n     * Очищення всіх ордербуків\n     */\n    clear() {\n      return this.send({\n        action: 'clear'\n      });\n    }\n  }\n  \n  export default WebSocketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}